package com.glabshop.dao;

import java.util.List;

import javax.persistence.TypedQuery;
import javax.transaction.Transactional;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.glabshop.entity.OrderDetail;
import com.glabshop.entity.Products;

@Transactional
@Repository
public class ProductDAOImpl implements ProductDAO{

	@Autowired
	SessionFactory factory;
	
	@Override
	public Products findById(Integer id) {
		Session session=factory.getCurrentSession();
		Products entity=session.find(Products.class, id);
		return entity;
	}

	@Override
	public List<Products> findAll() {
		String hql="FROM Product";
		Session session=factory.getCurrentSession();
		TypedQuery<Products> query=session.createQuery(hql,Products.class);
		List<Products> list=query.getResultList();
		return list;
	}

	@Override
	public Products create(Products entity) {
		Session session=factory.getCurrentSession();
		session.save(entity);
		return null;
	}

	@Override
	public void update(Products entity) {
		Session session=factory.getCurrentSession();
		session.update(entity);
		
	}

	@Override
	public Products delete(Integer id) {
		Session session=factory.getCurrentSession();
		Products entity=session.find(Products.class, id);
		session.delete(entity);
		return entity;
	}

	@Override
	public List<Products> findByCategoryId(Integer categoryId) {
		String hql="FROM Products p WHERE p.category.id=:cid";
		Session session=factory.getCurrentSession();
		TypedQuery<Products> query=session.createQuery(hql,Products.class);
		query.setParameter("cid", categoryId);
		List<Products> list=query.getResultList();
		return list;
	}
	@Override
	public List<Products> findByCategoryName(String categoryName) {
		String hql="FROM Products p WHERE p.category.name LIKE :cid OR p.category.nameVN LIKE :cid";
		Session session=factory.getCurrentSession();
		TypedQuery<Products> query=session.createQuery(hql,Products.class);
		query.setParameter("cid", categoryName);
		List<Products> list=query.getResultList();
		return list;
	}

	@Override
	public List<Products> findByKeywords(String keywords) {
		String hql="FROM Products p WHERE p.name LIKE :kw OR p.category.name LIKE :kw OR p.category.nameVN LIKE :kw";
		Session session=factory.getCurrentSession();
		TypedQuery<Products> query=session.createQuery(hql,Products.class);
		query.setParameter("kw", "%"+keywords+"%");
		List<Products> list=query.getResultList();
		return list;
	}

	@Override
	public List<Products> findByIds(String ids) {
		String hql="FROM Products p WHERE p.id IN ("+ids+")";

		Session session=factory.getCurrentSession();
		TypedQuery<Products> query=session.createQuery(hql,Products.class);
		List<Products> list=query.getResultList();
		return list;
	}

	@Override
	public List<Products> findBySpecial(Integer id) {
		Session session=factory.getCurrentSession();
		String hql="FROM Products p";
		TypedQuery<Products> query=session.createQuery(hql,Products.class);
		switch (id) {
			case 0://mới
				hql="FROM Products p ORDER BY p.productDate DESC";
				break;
			
			case 1://bán chạy
				hql="FROM Products p ORDER BY size(p.orderDetails) DESC";
				break;
				
			case 2://xem nhiều
				hql="FROM Products p ORDER BY p.viewCount DESC";
				break;
				
			case 3://giảm giá
				hql="FROM Products p ORDER BY p.discount DESC";
				break;
				
			case 4://dac biet
				hql="FROM Products p WHERE p.special=true ORDER BY p.productDate DESC";
				break;
		}
		query=session.createQuery(hql,Products.class);
		query.setMaxResults(12);
		
		List<Products> list=query.getResultList();
		return list;
	}

	

}
